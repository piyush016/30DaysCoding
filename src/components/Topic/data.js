export const datatopic = [
  {
    id: 1,
    dsatopic: "Array I",
    text: "Array is a collection of similar data elements stored at contiguous memory locations.",
    link: "https://www.geeksforgeeks.org/array-data-structure/",
    url: "/array1",
  },
  {
    id: 2,
    dsatopic: "Array II",
    text: "Array is simplest data structure where each data element can be accessed directly by only using its index number.",
    link: "https://www.geeksforgeeks.org/array-data-structure/",
    url: "/array2",
  },
  {
    id: 3,
    dsatopic: "Array III",
    text: "Hmm!! Simplest data strcuture? Is it really? Try solving it now and see how simple it is.",
    link: "https://www.geeksforgeeks.org/array-data-structure/",
    url: "/array3",
  },
  {
    id: 4,
    dsatopic: "Array IV",
    text: "Wait wtf? More? More array. Doesn't seem simple at all now. No problem keep trying, it will get easy. Or not? ",
    link: "https://www.geeksforgeeks.org/array-data-structure/",
    url: "/array4",
  },
  {
    id: 5,
    dsatopic: "Linked List I",
    text: "Linked list is a linear collection of data elements whose order is not given by their physical placement in memory.",
    link: "https://www.geeksforgeeks.org/data-structures/linked-list/",
    url: "/linkedlist1",
  },
  {
    id: 6,
    dsatopic: "Linked List II",
    text: "Again? Yes, it's linked list so obviously we need to link it.",
    link: "https://www.geeksforgeeks.org/data-structures/linked-list/",
    url: "/linkedlist2",
  },
  {
    id: 7,
    dsatopic: "Arrays and Linked List",
    text: "Let's see what happens if we mix 2 of the easiest topic. Will it get easier or difficult? Let's check.",
    link: "https://www.geeksforgeeks.org/linked-list-vs-array/",
    url: "/array-linkedlist",
  },
  {
    id: 8,
    dsatopic: "Greedy Algorithm",
    text: "Greedy algorithm is an approach for solving a problem by selecting the best option available at the moment. Do you think it's the best moment to slove these problems?",
    link: "https://www.geeksforgeeks.org/greedy-algorithms/",
    url: "/greedyalgorithm",
  },
  {
    id: 9,
    dsatopic: "Recursion",
    text: "Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion Recursion.",
    link: "https://www.geeksforgeeks.org/recursion/",
    url: "/recursion",
  },
  {
    id: 10,
    dsatopic: "Recursion and Backtracking",
    text: "Backtracking algorithm is a problem-solving algorithm that uses a brute force approach for finding the desired output.",
    link: "https://www.geeksforgeeks.org/backtracking-algorithms/",
    url: "/recursion-backtracking",
  },
  {
    id: 11,
    dsatopic: "Binary Search",
    text: "Binary Search is a searching algorithm used in a sorted array by repeatedly dividing the search interval in half.",
    link: "https://www.geeksforgeeks.org/binary-search/",
    url: "/binarysearch",
  },
  {
    id: 12,
    dsatopic: "Heaps",
    text: "Heap is a specialized tree-based data structure which is essentially an almost complete tree that satisfies the heap property",
    link: "https://www.geeksforgeeks.org/heap-data-structure/",
    url: "/heaps",
  },
  {
    id: 13,
    dsatopic: "Stack and Queue I",
    text: "Stack follows LIFO while Queue follows FIFO data structure type. ",
    link: "https://www.geeksforgeeks.org/difference-between-stack-and-queue-data-structures/",
    url: "/stack-queues1",
  },
  {
    id: 14,
    dsatopic: "Stack and Queue II",
    text: "More on stacks and queues? Why?",
    link: "https://www.geeksforgeeks.org/difference-between-stack-and-queue-data-structures/",
    url: "/stack-queues2",
  },
  {
    id: 15,
    dsatopic: "String I",
    text: "String are similar to array. It's just related to characters.",
    link: "https://www.geeksforgeeks.org/string-data-structure/",
    url: "/string1",
  },
  {
    id: 16,
    dsatopic: "String II",
    text: "['A','H',' ','S','H','I','T',' ','H','E','R','E',' ','W','E',' ','G','O',' ','A','G','A','I','N']",
    link: "https://www.geeksforgeeks.org/string-data-structure/",
    url: "/string2",
  },
  {
    id: 17,
    dsatopic: "Binary Tree I",
    text: "Binary tree is a tree-type non-linear data structure with a maximum of two children for each parent.",
    link: "https://www.geeksforgeeks.org/binary-tree-data-structure/",
    url: "/binarytree1",
  },
  {
    id: 18,
    dsatopic: "Binary Tree II",
    text: "Since it is binary. So 2nd part was important. So it is here for you.",
    link: "https://www.geeksforgeeks.org/binary-tree-data-structure/",
    url: "/binarytree2",
  },
  {
    id: 19,
    dsatopic: "Binary Tree III",
    text: "I know what I said, but this time branch is at another heigh. Don't believe me. Try it yourself.",
    link: "https://www.geeksforgeeks.org/binary-tree-data-structure/",
    url: "/binarytree3",
  },
  {
    id: 20,
    dsatopic: "Binary Search Tree I",
    text: "What will happen if we mix Binary tree and Binary search? Hmm, something complex? Or not?",
    link: "https://www.geeksforgeeks.org/binary-search-tree-data-structure/",
    url: "/binarysearchtree1",
  },
  {
    id: 21,
    dsatopic: "Binary Search Tree II",
    text: "Where should we go? Left?? Right?? Stay we are??",
    link: "https://www.geeksforgeeks.org/binary-search-tree-data-structure/",
    url: "/binarysearchtree2",
  },
  {
    id: 22,
    dsatopic: "Binary Search Tree [Miscellaneous]",
    text: "I swear it's the last tree. Maybe.",
    link: "https://www.geeksforgeeks.org/binary-search-tree-data-structure/",
    url: "/bst-misc",
  },
  {
    id: 23,
    dsatopic: "Graph I",
    text: "Enough of linear data structure. Let's get lost in different routes.",
    link: "https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/",
    url: "/graph1",
  },
  {
    id: 24,
    dsatopic: "Graph II",
    text: "The road less travelled. Indeed. Because not everyone is able to reach till here.",
    link: "https://www.geeksforgeeks.org/graph-data-structure-and-algorithms/",
    url: "/graph2",
  },
  {
    id: 25,
    dsatopic: "Dynamic Programming I",
    text: "Dynamic Programming is mainly an optimization over plain recursion. ",
    link: "https://www.geeksforgeeks.org/dynamic-programming/",
    url: "/dp1",
  },
  {
    id: 26,
    dsatopic: "Dynamic Programming II",
    text: "DP, not your whatsapp one is also one of the important topic in product based companies.",
    link: "https://www.geeksforgeeks.org/dynamic-programming/",
    url: "/dp2",
  },
  {
    id: 27,
    dsatopic: "Trie",
    text: "Hard to explain. Why don't you people understand and tell it to me through our contact page?",
    link: "https://www.geeksforgeeks.org/trie-insert-and-search/",
    url: "/dp3",
  },
];
